-- Function to insert a new salesperson
CREATE FUNCTION InsertSalesperson(p_name VARCHAR(50))
RETURNS VOID AS $$
BEGIN
    INSERT INTO Salesperson (name)
    VALUES (p_name);
END;
$$ LANGUAGE plpgsql;

-- Function to insert a new customer
CREATE FUNCTION InsertCustomer(p_name VARCHAR(50))
RETURNS VOID AS $$
BEGIN
    INSERT INTO Customer (name)
    VALUES (p_name);
END;
$$ LANGUAGE plpgsql;

-- Function to insert a new car
CREATE FUNCTION InsertCar(p_serial_number VARCHAR(50))
RETURNS VOID AS $$
BEGIN
    INSERT INTO Car (serial_number)
    VALUES (p_serial_number);
END;
$$ LANGUAGE plpgsql;

-- Function to insert a new invoice
CREATE FUNCTION InsertInvoice(p_salesperson_id INTEGER, p_car_id INTEGER)
RETURNS VOID AS $$
BEGIN
    INSERT INTO Invoice (salesperson_id, car_id)
    VALUES (p_salesperson_id, p_car_id);
END;
$$ LANGUAGE plpgsql;

-- Function to insert a new service ticket
CREATE FUNCTION InsertServiceTicket(p_customer_id INTEGER, p_car_id INTEGER)
RETURNS VOID AS $$
BEGIN
    INSERT INTO Service_Ticket (customer_id, car_id)
    VALUES (p_customer_id, p_car_id);
END;
$$ LANGUAGE plpgsql;

-- Function to insert a new service history record
CREATE FUNCTION InsertServiceHistory(p_car_id INTEGER)
RETURNS VOID AS $$
BEGIN
    INSERT INTO Service_History (car_id)
    VALUES (p_car_id);
END;
$$ LANGUAGE plpgsql;

-- Function insert a new mechanic
CREATE FUNCTION InsertMechanic(p_name VARCHAR(50))
RETURNS VOID AS $$
BEGIN
    INSERT INTO Mechanic (name)
    VALUES (p_name);
END;
$$ LANGUAGE plpgsql;

-- Problem: calculate the total revenue generated by a salesperson

-- First, create a function to retrieve the salesperson's name given their ID
CREATE FUNCTION GetSalespersonName(p_salesperson_id INTEGER)
RETURNS VARCHAR(50) AS $$
DECLARE
    salesperson_name VARCHAR(50);
BEGIN
    SELECT name INTO salesperson_name
    FROM Salesperson
    WHERE salesperson_id = p_salesperson_id;
    
    RETURN salesperson_name;
END;
$$ LANGUAGE plpgsql;

-- Then, write a function to calculate the total revenue generated by a salesperson
CREATE FUNCTION CalculateSalespersonRevenue(p_salesperson_id INTEGER)
RETURNS NUMERIC AS $$
DECLARE
    total_revenue NUMERIC;
BEGIN
    SELECT COALESCE(SUM(I.cost), 0) INTO total_revenue
    FROM Invoice AS I
    WHERE I.salesperson_id = p_salesperson_id;
    
    RETURN total_revenue;
END;
$$ LANGUAGE plpgsql;

-- Get the salesperson name
SELECT GetSalespersonName(1) AS salesperson_name;

-- Calculate the total revenue for a salesperson
SELECT CalculateSalespersonRevenue(1) AS total_revenue;
 
